package com.fbadsautomation.controller;

import com.fbadsautomation.model.User;
import com.fbadsautomation.service.AuthService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.Map;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@Slf4j
public class AuthController {

    private final AuthService authService;

    @GetMapping("/facebook")
    public void facebookLogin(HttpServletResponse response) {
        log.info("Initiating Facebook login");
        String authorizationUrl = authService.getFacebookAuthorizationUrl();
        response.setHeader("Location", authorizationUrl);
        response.setStatus(302); // Redirect
    }

    @GetMapping("/oauth2/callback/facebook")
    public void facebookCallback(
            @RequestParam("code") String code,
            @RequestParam("state") String state,
            HttpServletResponse response) throws Exception {
        log.info("Processing Facebook callback with code: {}", code);
        Map<String, String> tokenResponse = authService.processFacebookCallback(code, state);

        // Get session ID for token retrieval
        String sessionId = tokenResponse.get("sessionId");

        // Redirect to success endpoint with session ID
        response.sendRedirect("/api/auth/success?sessionId=" + sessionId);
    }

    @GetMapping("/success")
    public void authSuccess(
            @RequestParam("sessionId") String sessionId,
            HttpServletResponse response) throws Exception {
        log.info("Authentication successful, redirecting to frontend with token");

        try {
            // Get token from session store
            Map<String, String> tokenInfo = authService.getStoredAuthToken(sessionId);
            String token = tokenInfo.get("token");

            // Redirect to frontend auth-success page with token in URL fragment
            response.sendRedirect("https://linhnh.site/auth-success#token=" + token);
        } catch (Exception e) {
            log.error("Error in auth success: {}", e.getMessage(), e);
            response.sendRedirect("https://linhnh.site/login?error=auth_failed");
        }
    }

    @GetMapping("/failure")
    public void authFailure(HttpServletResponse response) throws Exception {
        log.info("Authentication failed, redirecting to frontend");
        // Redirect to frontend login page with error parameter
        response.sendRedirect("https://linhnh.site/login?error=auth_failed");
    }

    @GetMapping("/user")
    public ResponseEntity<User> getCurrentUser() {
        log.info("Getting current user");
        return ResponseEntity.ok(authService.getCurrentUser());
    }

    @PostMapping("/logout")
    public ResponseEntity<Void> logout() {
        log.info("Processing logout");
        authService.logout();
        return ResponseEntity.noContent().build();
    }
}
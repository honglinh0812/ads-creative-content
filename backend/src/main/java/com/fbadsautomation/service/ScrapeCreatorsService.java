package com.fbadsautomation.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class ScrapeCreatorsService {

    private static final Logger log = LoggerFactory.getLogger(ScrapeCreatorsService.class);

    private final RestTemplate restTemplate;
    
    @Autowired
    public ScrapeCreatorsService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }
    
    @Value("${scrape.creators.api.key:your-api-key-here}")
    private String apiKey;
    
    @Value("${scrape.creators.api.base.url:https://api.scrapecreators.com/v1}")
    private String baseUrl;

    /**
     * G·ªçi ScrapeCreators API ƒë·ªÉ l·∫•y th√¥ng tin qu·∫£ng c√°o Facebook
     * @param adId Facebook Ad ID
     * @param getTranscript C√≥ l·∫•y transcript hay kh√¥ng
     * @return K·∫øt qu·∫£ t·ª´ API
     */
    public Map<String, Object> scrapeCreators(String adId, boolean getTranscript) {
        log.info("Calling ScrapeCreators API for ad ID: {}", adId);

        // Ki·ªÉm tra API key v·ªõi logging r√µ r√†ng
        if (apiKey == null || apiKey.isEmpty() || "your-api-key-here".equals(apiKey)) {
            log.error("‚ùå SCRAPE_CREATORS_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ho·∫∑c kh√¥ng h·ª£p l·ªá");
            log.error("Vui l√≤ng th√™m scrape.creators.api.key v√†o application.properties");
            Map<String, Object> error = new HashMap<>();
            error.put("error", "API_KEY_NOT_CONFIGURED");
            error.put("message", "ScrapeCreators API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh");
            error.put("userMessage", "Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ c·∫•u h√¨nh API key");
            return error;
        }

        try {
            String url = baseUrl + "/facebook/adLibrary/ad?id=" + adId;
            if (getTranscript) {
                url += "&get_transcript=true";
            }

            log.info("üì° Calling ScrapeCreators API: {}", url);

            HttpHeaders headers = new HttpHeaders();
            headers.set("x-api-key", apiKey);
            headers.set("Accept", "application/json");

            HttpEntity<String> entity = new HttpEntity<>(headers);
            ResponseEntity<Map> response = restTemplate.exchange(url, HttpMethod.GET, entity, Map.class);

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                Map<String, Object> body = response.getBody();

                // Validate response c√≥ data kh√¥ng
                if (body.containsKey("error") || body.isEmpty()) {
                    log.warn("‚ö†Ô∏è ScrapeCreators API returned error or empty data for ad ID: {}", adId);
                    Map<String, Object> error = new HashMap<>();
                    error.put("error", "API_RETURNED_ERROR");
                    error.put("message", body.getOrDefault("error", "API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu"));
                    error.put("adId", adId);
                    return error;
                }

                log.info("‚úÖ ScrapeCreators API call successful for ad ID: {}", adId);
                return body;
            } else {
                log.error("‚ùå ScrapeCreators API returned error status: {}", response.getStatusCode());
                Map<String, Object> error = new HashMap<>();
                error.put("error", "API_ERROR_STATUS");
                error.put("message", "API returned status: " + response.getStatusCode());
                error.put("statusCode", response.getStatusCode().value());
                return error;
            }
        } catch (org.springframework.web.client.HttpClientErrorException e) {
            // 4xx errors (authentication, not found, etc.)
            log.error("‚ùå ScrapeCreators API client error for ad ID {}: {} - {}",
                     adId, e.getStatusCode(), e.getResponseBodyAsString());
            Map<String, Object> error = new HashMap<>();
            error.put("error", "API_CLIENT_ERROR");
            error.put("message", "L·ªói t·ª´ API: " + e.getMessage());
            error.put("statusCode", e.getStatusCode().value());
            error.put("details", e.getResponseBodyAsString());
            return error;
        } catch (org.springframework.web.client.HttpServerErrorException e) {
            // 5xx errors (server error)
            log.error("‚ùå ScrapeCreators API server error for ad ID {}: {}", adId, e.getMessage());
            Map<String, Object> error = new HashMap<>();
            error.put("error", "API_SERVER_ERROR");
            error.put("message", "API server ƒëang g·∫∑p s·ª± c·ªë");
            error.put("statusCode", e.getStatusCode().value());
            return error;
        } catch (Exception e) {
            log.error("‚ùå Error calling ScrapeCreators API for ad ID {}: {}", adId, e.getMessage(), e);
            Map<String, Object> error = new HashMap<>();
            error.put("error", "NETWORK_ERROR");
            error.put("message", "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi API: " + e.getMessage());
            return error;
        }
    }

    /**
     * G·ªçi ScrapeCreators API cho nhi·ªÅu ad IDs
     * @param adIds Danh s√°ch Facebook Ad IDs
     * @param getTranscript C√≥ l·∫•y transcript hay kh√¥ng
     * @return Danh s√°ch k·∫øt qu·∫£
     */
    public List<Map<String, Object>> scrapeCreatorsBatch(List<String> adIds, boolean getTranscript) {
        List<Map<String, Object>> results = new ArrayList<>();
        for (String adId : adIds) {
            Map<String, Object> result = scrapeCreators(adId, getTranscript);
            results.add(result);
            
            // Th√™m delay nh·ªè gi·ªØa c√°c requests ƒë·ªÉ tr√°nh rate limiting
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                break;
            }
        }
        
        return results;
    }
}
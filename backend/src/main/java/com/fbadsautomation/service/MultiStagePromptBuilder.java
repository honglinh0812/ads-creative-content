package com.fbadsautomation.service;

import com.fbadsautomation.model.AdPersona;
import com.fbadsautomation.model.AdType;
import com.fbadsautomation.model.Campaign;
import com.fbadsautomation.util.ValidationMessages.Language;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

/**
 * Multi-stage prompt builder for natural, persona-driven ad content generation.
 *
 * Architecture:
 * Stage 1: Extract product info from user prompt (lightweight analysis)
 * Stage 2: Enrich with persona, context, and examples
 * Stage 3: Generate natural ad content with constraints
 */
@Service
public class MultiStagePromptBuilder {

    private static final Logger log = LoggerFactory.getLogger(MultiStagePromptBuilder.class);

    /**
     * Build final enhanced prompt for ad content generation
     * This combines persona, context, and constraints into a natural prompt
     */
    public String buildEnhancedPrompt(String userPrompt,
                                       AdPersona persona,
                                      AdType adType,
                                      Language language,
                                      com.fbadsautomation.dto.AudienceSegmentRequest audienceSegment,
                                      com.fbadsautomation.model.AdStyle adStyle) {

        log.info("Building multi-stage prompt with persona: {}, style: {}, language: {}",
                 persona.name(), adStyle != null ? adStyle.name() : "none", language);

        StringBuilder enhancedPrompt = new StringBuilder();
        boolean isVietnamese = (language == Language.VIETNAMESE);

        // Stage 1: Context - User's original request
        enhancedPrompt.append(buildUserContextSection(userPrompt, isVietnamese));
        enhancedPrompt.append("\n\n");

        // Stage 2: Persona - Role, tone, vocabulary, examples
        enhancedPrompt.append(persona.getPersonaInstruction(isVietnamese));
        enhancedPrompt.append("\n\n");

        // Stage 2.5: Creative Style (if specified) - Issue #8
        if (adStyle != null) {
            enhancedPrompt.append(adStyle.getStyleInstruction(isVietnamese));
            enhancedPrompt.append("\n\n");
            log.debug("Added style instruction: {}", adStyle.name());
        }

        // Stage 3: Audience targeting (if provided)
        if (audienceSegment != null) {
            enhancedPrompt.append(buildAudienceSection(audienceSegment, isVietnamese));
            enhancedPrompt.append("\n\n");
        }

        // Stage 4: Technical constraints & format
        enhancedPrompt.append(buildConstraintsSection(adType, isVietnamese));
        enhancedPrompt.append("\n\n");

        // Stage 5: Critical instructions (CTA handling, natural tone)
        enhancedPrompt.append(buildCriticalInstructions(isVietnamese));

        log.debug("Enhanced prompt built (length: {} chars)", enhancedPrompt.length());
        return enhancedPrompt.toString();
    }

    /**
     * Issue #9: Build enhanced prompt with Campaign (audience at campaign level)
     * This is the NEW method that gets audience from Campaign.targetAudience
     */
    public String buildEnhancedPrompt(String userPrompt,
                                       AdPersona persona,
                                       AdType adType,
                                       Language language,
                                       Campaign campaign,
                                       com.fbadsautomation.model.AdStyle adStyle) {

        log.info("Building prompt with campaign-level audience (Issue #9): campaign={}, persona={}, style={}",
                 campaign != null ? campaign.getId() : "none",
                 persona.name(),
                 adStyle != null ? adStyle.name() : "none");

        StringBuilder enhancedPrompt = new StringBuilder();
        boolean isVietnamese = (language == Language.VIETNAMESE);

        // Stage 1: Context - User's original request
        enhancedPrompt.append(buildUserContextSection(userPrompt, isVietnamese));
        enhancedPrompt.append("\n\n");

        // Stage 2: Persona - Role, tone, vocabulary, examples
        enhancedPrompt.append(persona.getPersonaInstruction(isVietnamese));
        enhancedPrompt.append("\n\n");

        // Stage 2.5: Creative Style (if specified) - Issue #8
        if (adStyle != null) {
            enhancedPrompt.append(adStyle.getStyleInstruction(isVietnamese));
            enhancedPrompt.append("\n\n");
            log.debug("Added style instruction: {}", adStyle.name());
        }

        // Stage 3: Audience targeting from Campaign (Issue #9)
        if (campaign != null && campaign.getTargetAudience() != null && !campaign.getTargetAudience().trim().isEmpty()) {
            enhancedPrompt.append(buildAudienceSectionFromCampaign(campaign.getTargetAudience(), isVietnamese));
            enhancedPrompt.append("\n\n");
            log.debug("Added campaign audience: {}", campaign.getTargetAudience());
        }

        // Stage 4: Technical constraints & format
        enhancedPrompt.append(buildConstraintsSection(adType, isVietnamese));
        enhancedPrompt.append("\n\n");

        // Stage 5: Critical instructions (CTA handling, natural tone)
        enhancedPrompt.append(buildCriticalInstructions(isVietnamese));

        log.debug("Enhanced prompt built with campaign audience (length: {} chars)", enhancedPrompt.length());
        return enhancedPrompt.toString();
    }

    /**
     * Stage 1: User context section
     */
    private String buildUserContextSection(String userPrompt, boolean isVietnamese) {
        StringBuilder section = new StringBuilder();

        if (isVietnamese) {
            section.append("üìã Y√äU C·∫¶U T·ª™ NG∆Ø·ªúI D√ôNG:\n");
            section.append(userPrompt);
        } else {
            section.append("üìã USER REQUEST:\n");
            section.append(userPrompt);
        }

        return section.toString();
    }

    /**
     * Stage 3: Audience targeting section
     */
    private String buildAudienceSection(com.fbadsautomation.dto.AudienceSegmentRequest audienceSegment, boolean isVietnamese) {
        StringBuilder section = new StringBuilder();

        if (isVietnamese) {
            section.append("üéØ ƒê·ªêI T∆Ø·ª¢NG M·ª§C TI√äU:\n");

            if (audienceSegment.getGender() != null) {
                section.append("‚Ä¢ Gi·ªõi t√≠nh: ").append(audienceSegment.getGender().getDisplayName()).append("\n");
            }

            if (audienceSegment.getMinAge() != null && audienceSegment.getMaxAge() != null) {
                section.append("‚Ä¢ ƒê·ªô tu·ªïi: ").append(audienceSegment.getMinAge())
                        .append("-").append(audienceSegment.getMaxAge()).append(" tu·ªïi\n");
            } else if (audienceSegment.getMinAge() != null) {
                section.append("‚Ä¢ ƒê·ªô tu·ªïi: ").append(audienceSegment.getMinAge()).append("+ tu·ªïi\n");
            }

            if (audienceSegment.getLocation() != null && !audienceSegment.getLocation().trim().isEmpty()) {
                section.append("‚Ä¢ Khu v·ª±c: ").append(audienceSegment.getLocation()).append("\n");
            }

            if (audienceSegment.getInterests() != null && !audienceSegment.getInterests().trim().isEmpty()) {
                section.append("‚Ä¢ S·ªü th√≠ch: ").append(audienceSegment.getInterests()).append("\n");
            }

            section.append("\nüí° T·∫°o n·ªôi dung ph√π h·ª£p v·ªõi ƒë·ªëi t∆∞·ª£ng n√†y!");
        } else {
            section.append("üéØ TARGET AUDIENCE:\n");

            if (audienceSegment.getGender() != null) {
                section.append("‚Ä¢ Gender: ").append(audienceSegment.getGender().getDisplayName()).append("\n");
            }

            if (audienceSegment.getMinAge() != null && audienceSegment.getMaxAge() != null) {
                section.append("‚Ä¢ Age: ").append(audienceSegment.getMinAge())
                        .append("-").append(audienceSegment.getMaxAge()).append(" years old\n");
            } else if (audienceSegment.getMinAge() != null) {
                section.append("‚Ä¢ Age: ").append(audienceSegment.getMinAge()).append("+ years old\n");
            }

            if (audienceSegment.getLocation() != null && !audienceSegment.getLocation().trim().isEmpty()) {
                section.append("‚Ä¢ Location: ").append(audienceSegment.getLocation()).append("\n");
            }

            if (audienceSegment.getInterests() != null && !audienceSegment.getInterests().trim().isEmpty()) {
                section.append("‚Ä¢ Interests: ").append(audienceSegment.getInterests()).append("\n");
            }

            section.append("\nüí° Create content suitable for this audience!");
        }

        return section.toString();
    }

    /**
     * Issue #9: Build audience section from Campaign's targetAudience string
     * This is simpler than AudienceSegmentRequest as it's a free-form text field
     */
    private String buildAudienceSectionFromCampaign(String targetAudience, boolean isVietnamese) {
        StringBuilder section = new StringBuilder();

        if (isVietnamese) {
            section.append("üéØ ƒê·ªêI T∆Ø·ª¢NG M·ª§C TI√äU (C·∫§P CHI·∫æN D·ªäCH):\n");
            section.append(targetAudience);
            section.append("\n\nüí° T·∫°o n·ªôi dung ph√π h·ª£p v·ªõi ƒë·ªëi t∆∞·ª£ng n√†y!");
        } else {
            section.append("üéØ TARGET AUDIENCE (CAMPAIGN LEVEL):\n");
            section.append(targetAudience);
            section.append("\n\nüí° Create content suitable for this audience!");
        }

        return section.toString();
    }

    /**
     * Stage 4: Technical constraints & format
     */
    private String buildConstraintsSection(AdType adType, boolean isVietnamese) {
        StringBuilder section = new StringBuilder();

        if (isVietnamese) {
            section.append("üìê Y√äU C·∫¶U K·ª∏ THU·∫¨T:\n");
            section.append("‚Ä¢ Ti√™u ƒë·ªÅ (Headline): T·ªëi ƒëa 40 k√Ω t·ª±, ng·∫Øn g·ªçn, thu h√∫t\n");
            section.append("‚Ä¢ M√¥ t·∫£ (Description): T·ªëi ƒëa 125 k√Ω t·ª±, l√†m r√µ l·ª£i √≠ch\n");
            section.append("‚Ä¢ VƒÉn b·∫£n ch√≠nh (Primary Text): T·ªëi ƒëa 1000 k√Ω t·ª±, k·ªÉ chuy·ªán + social proof\n");
            section.append("‚Ä¢ ƒê·ªãnh d·∫°ng: JSON v·ªõi c√°c tr∆∞·ªùng headline, description, primaryText\n\n");

            section.append("‚öñÔ∏è TU√ÇN TH·ª¶ CH√çNH S√ÅCH FACEBOOK:\n");
            section.append("‚Ä¢ Kh√¥ng d√πng: 'ƒë·∫£m b·∫£o 100%', 'th·∫ßn k·ª≥', 'l√†m gi√†u nhanh', 'ch·ªØa b·ªánh'\n");
            section.append("‚Ä¢ Tr√°nh: Ch·ªØ IN HOA to√†n b·ªô, d·∫•u ch·∫•m than qu√° nhi·ªÅu (!!!), spam\n");
            section.append("‚Ä¢ Ph·∫£i: Trung th·ª±c, r√µ r√†ng, kh√¥ng ph√≥ng ƒë·∫°i\n");
        } else {
            section.append("üìê TECHNICAL REQUIREMENTS:\n");
            section.append("‚Ä¢ Headline: Max 40 characters, concise, attention-grabbing\n");
            section.append("‚Ä¢ Description: Max 125 characters, clarify benefits\n");
            section.append("‚Ä¢ Primary Text: Max 1000 characters, storytelling + social proof\n");
            section.append("‚Ä¢ Format: JSON with headline, description, primaryText fields\n\n");

            section.append("‚öñÔ∏è FACEBOOK POLICY COMPLIANCE:\n");
            section.append("‚Ä¢ Don't use: '100% guaranteed', 'miracle', 'get rich quick', 'cure disease'\n");
            section.append("‚Ä¢ Avoid: ALL CAPS, excessive exclamation marks (!!!), spam\n");
            section.append("‚Ä¢ Must: Be honest, clear, not exaggerated\n");
        }

        return section.toString();
    }

    /**
     * Stage 5: Critical instructions
     */
    private String buildCriticalInstructions(boolean isVietnamese) {
        StringBuilder section = new StringBuilder();

        if (isVietnamese) {
            section.append("‚ö†Ô∏è QUAN TR·ªåNG:\n");
            section.append("1. TUY·ªÜT ƒê·ªêI KH√îNG th√™m t·ª´ kh√≥a CTA (LEARN_MORE, SHOP_NOW, v.v.) v√†o cu·ªëi n·ªôi dung\n");
            section.append("2. Call-to-action s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ri√™ng b·ªüi h·ªá th·ªëng\n");
            section.append("3. Vi·∫øt t·ª± nhi√™n nh∆∞ ng∆∞·ªùi th·∫≠t n√≥i chuy·ªán, KH√îNG nh∆∞ brochure c√¥ng ty\n");
            section.append("4. D√πng t·ª´ ng·ªØ, c·∫£m x√∫c ph√π h·ª£p v·ªõi persona v√† ƒë·ªëi t∆∞·ª£ng m·ª•c ti√™u\n");
            section.append("5. T·∫≠p trung v√†o l·ª£i √≠ch kh√°ch h√†ng, kh√¥ng ch·ªâ li·ªát k√™ t√≠nh nƒÉng\n\n");

            section.append("‚ú® NHI·ªÜM V·ª§:\n");
            section.append("T·∫°o 1 qu·∫£ng c√°o Facebook theo format JSON, t·ª± nhi√™n v√† h·∫•p d·∫´n nh∆∞ v√≠ d·ª• m·∫´u ·ªü tr√™n.");
        } else {
            section.append("‚ö†Ô∏è CRITICAL:\n");
            section.append("1. ABSOLUTELY DO NOT add CTA keywords (LEARN_MORE, SHOP_NOW, etc.) at the end of content\n");
            section.append("2. Call-to-action will be handled separately by the system\n");
            section.append("3. Write naturally like real people talk, NOT like corporate brochure\n");
            section.append("4. Use words and emotions matching the persona and target audience\n");
            section.append("5. Focus on customer benefits, not just listing features\n\n");

            section.append("‚ú® TASK:\n");
            section.append("Create 1 Facebook ad in JSON format, natural and engaging like the example above.");
        }

        return section.toString();
    }

    /**
     * Build simplified prompt (without persona) for backward compatibility
     * This is the old method that will be deprecated
     */
    @Deprecated
    public String buildLegacyPrompt(String userPrompt, AdType adType, Language language) {
        log.warn("Using legacy prompt builder - consider upgrading to persona-based prompting");

        StringBuilder enhanced = new StringBuilder(userPrompt);
        boolean isVietnamese = (language == Language.VIETNAMESE);

        if (isVietnamese) {
            enhanced.append("\n\nüìã Y√äU C·∫¶U N·ªòI DUNG:\n");
            enhanced.append("‚úì Ti√™u ƒë·ªÅ: T·ªëi ƒëa 40 k√Ω t·ª±\n");
            enhanced.append("‚úì M√¥ t·∫£: T·ªëi ƒëa 125 k√Ω t·ª±\n");
            enhanced.append("‚úì VƒÉn b·∫£n ch√≠nh: T·ªëi ƒëa 1000 k√Ω t·ª±\n");
            enhanced.append("‚úì Gi·ªçng ƒëi·ªáu: Chuy√™n nghi·ªáp, r√µ r√†ng, h∆∞·ªõng t·ªõi h√†nh ƒë·ªông\n");
            enhanced.append("‚úì Phong c√°ch: Tr√°nh d·∫•u ch·∫•m than/h·ªèi qu√° nhi·ªÅu\n");
        } else {
            enhanced.append("\n\nüìã CONTENT REQUIREMENTS:\n");
            enhanced.append("‚úì Headline: Maximum 40 characters\n");
            enhanced.append("‚úì Description: Maximum 125 characters\n");
            enhanced.append("‚úì Primary Text: Maximum 1000 characters\n");
            enhanced.append("‚úì Tone: Professional, clear, action-oriented\n");
            enhanced.append("‚úì Style: Avoid excessive punctuation\n");
        }

        return enhanced.toString();
    }
}

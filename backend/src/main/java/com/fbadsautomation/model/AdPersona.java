package com.fbadsautomation.model;

/**
 * Ad persona definitions for natural, category-specific ad copy generation.
 * Each persona defines category and tone to guide AI.
 */
public enum AdPersona {

    GEN_Z_GAMER(
        "Gaming & Entertainment",
        "Th√¢n thi·ªán, h√†i h∆∞·ªõc, energetic nh∆∞ Gen Z gamer",
        "Friendly, humorous, energetic like Gen Z gamer"
    ),

    TRENDY_SHOPPER(
        "Fashion & Lifestyle",
        "Trendy, stylish, FOMO-inducing nh∆∞ fashionista",
        "Trendy, stylish, FOMO-inducing like fashionista"
    ),

    STUDENT_FOCUSED(
        "Education & Learning",
        "ƒê·ªông vi√™n, d·ªÖ hi·ªÉu, relatable nh∆∞ b·∫°n c√πng l·ªõp",
        "Encouraging, easy to understand, relatable like classmate"
    ),

    PROFESSIONAL_TRUSTWORTHY(
        "Finance & B2B Services",
        "ƒê√°ng tin c·∫≠y, chuy√™n nghi·ªáp, r√µ r√†ng",
        "Trustworthy, professional, clear"
    ),

    HEALTH_WELLNESS(
        "Health, Fitness & Beauty",
        "ƒê·ªông vi√™n, t√≠ch c·ª±c, empathetic",
        "Encouraging, positive, empathetic"
    ),

    FOOD_BEVERAGE(
        "Food & Beverage",
        "H·∫•p d·∫´n, g·ª£i c·∫£m gi√°c th√®m ƒÉn, friendly",
        "Appetizing, crave-inducing, friendly"
    ),

    GENERAL_FRIENDLY(
        "General/Default",
        "Th√¢n thi·ªán, r√µ r√†ng, h∆∞·ªõng t·ªõi h√†nh ƒë·ªông",
        "Friendly, clear, action-oriented"
    );

    private final String category;
    private final String toneVietnamese;
    private final String toneEnglish;

    AdPersona(String category,
              String toneVietnamese,
              String toneEnglish) {
        this.category = category;
        this.toneVietnamese = toneVietnamese;
        this.toneEnglish = toneEnglish;
    }

    public String getCategory() {
        return category;
    }

    public String getTone(boolean isVietnamese) {
        return isVietnamese ? toneVietnamese : toneEnglish;
    }

    /**
     * Get persona instruction text for AI prompting
     */
    public String getPersonaInstruction(boolean isVietnamese) {
        StringBuilder instruction = new StringBuilder();

        if (isVietnamese) {
            instruction.append("üé≠ VAI TR√í C·ª¶A B·∫†N:\n");
            instruction.append("B·∫°n l√† copywriter chuy√™n vi·∫øt qu·∫£ng c√°o ").append(category).append(" cho th·ªã tr∆∞·ªùng Vi·ªát Nam.\n\n");

            instruction.append("‚ú® GI·ªåNG ƒêI·ªÜU & PHONG C√ÅCH:\n");
            instruction.append(toneVietnamese).append("\n\n");

            instruction.append("‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG:\n");
            instruction.append("- T·∫°o n·ªôi dung HO√ÄN TO√ÄN M·ªöI d·ª±a tr√™n y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng\n");
            instruction.append("- KH√îNG sao ch√©p b·∫•t k·ª≥ v√≠ d·ª• n√†o t·ª´ training data\n");
            instruction.append("- S·ª≠ d·ª•ng gi·ªçng ƒëi·ªáu ph√π h·ª£p v·ªõi ").append(category).append("\n");
        } else {
            instruction.append("üé≠ YOUR ROLE:\n");
            instruction.append("You are a copywriter specializing in ").append(category).append(" ads.\n\n");

            instruction.append("‚ú® TONE & STYLE:\n");
            instruction.append(toneEnglish).append("\n\n");

            instruction.append("‚ö†Ô∏è IMPORTANT NOTES:\n");
            instruction.append("- Create COMPLETELY NEW content based on user request\n");
            instruction.append("- DO NOT copy any examples from training data\n");
            instruction.append("- Use appropriate tone for ").append(category).append("\n");
        }

        return instruction.toString();
    }
}

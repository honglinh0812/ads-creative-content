version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: fbads-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fbadsautomation}
      POSTGRES_USER: ${POSTGRES_USER:-fbadsautomation}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-fbadsautomation}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/database-setup.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fbadsautomation}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fbads-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fbads-redis
    restart: unless-stopped
    command: >
      bash -lc 'if [ -n "$REDIS_PASSWORD" ];
        then exec redis-server --appendonly yes --requirepass "$REDIS_PASSWORD";
        else exec redis-server --appendonly yes;
      fi'
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fbads-network

  # MinIO Object Storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: fbads-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - fbads-network

  # Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fbads-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      # Spring Profile
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}

      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-fbadsautomation}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-fbadsautomation}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-fbadsautomation}

      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-}

      # MinIO Configuration
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-fbads-content}

      # AI Provider API Keys
      AI_OPENAI_API_KEY: ${AI_OPENAI_API_KEY}
      AI_GEMINI_API_KEY: ${AI_GEMINI_API_KEY}
      AI_ANTHROPIC_API_KEY: ${AI_ANTHROPIC_API_KEY}
      AI_HUGGINGFACE_API_KEY: ${AI_HUGGINGFACE_API_KEY}
      FAL_AI_API_KEY: ${FAL_AI_API_KEY}
      STABLE_DIFFUSION_API_KEY: ${STABLE_DIFFUSION_API_KEY}

      # OAuth Configuration
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_FACEBOOK_CLIENT_ID: ${FACEBOOK_APP_ID}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_FACEBOOK_CLIENT_SECRET: ${FACEBOOK_APP_SECRET}

      # JWT Configuration
      APP_JWT_SECRET: ${JWT_SECRET}
      APP_JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}

      # CORS Configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:8081,http://localhost:80}

      # SerpApi Configuration
      SERPAPI_KEY: ${SERPAPI_API_KEY}

      # ScrapeCreators Configuration
      SCRAPE_CREATORS_API_KEY: ${SCRAPE_CREATORS_API_KEY}

      # Server Configuration
      SERVER_PORT: 8080

      # Logging
      LOGGING_FILE_NAME: /app/logs/application.log
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - fbads-network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VUE_APP_API_BASE_URL: ${VUE_APP_API_BASE_URL:-/api}
        VUE_APP_SENTRY_DSN: ${VUE_APP_SENTRY_DSN}
        VUE_APP_ENVIRONMENT: ${VUE_APP_ENVIRONMENT:-production}
    container_name: fbads-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT:-80}:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fbads-network

  # Nginx Reverse Proxy (optional, for production with SSL)
  nginx:
    image: nginx:alpine
    container_name: fbads-nginx
    restart: unless-stopped
    profiles:
      - production
    depends_on:
      - backend
      - frontend
    volumes:
      - ./deployment/nginx-production.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - fbads-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  fbads-network:
    driver: bridge

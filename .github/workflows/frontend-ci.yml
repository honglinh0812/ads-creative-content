name: Frontend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'

jobs:
  lint:
    name: Lint Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache npm packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: Check Prettier formatting
        run: |
          cd frontend
          npm run format:check || echo "Prettier formatting issues found (non-blocking for now)"
        continue-on-error: true

      - name: Run CSS Linting
        run: |
          cd frontend
          npm run lint:css || echo "CSS linting issues found (non-blocking for now)"
        continue-on-error: true

  test:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache npm packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run unit tests
        run: |
          cd frontend
          npm run test:unit || echo "No unit tests configured yet"
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: frontend/coverage/
        continue-on-error: true

  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache npm packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build production bundle
        run: |
          cd frontend
          npm run build
        env:
          NODE_ENV: production
          VUE_APP_API_BASE_URL: /api

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 7

      - name: Check bundle size
        run: |
          cd frontend
          echo "Build artifact size:"
          du -sh dist/
          echo ""
          echo "JavaScript bundle sizes:"
          find dist/js -name "*.js" -exec ls -lh {} \; | awk '{print $5, $9}'
        continue-on-error: true

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache npm packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run TypeScript type check
        run: |
          cd frontend
          npx vue-tsc --noEmit || echo "Type checking completed with warnings"
        continue-on-error: true

  accessibility:
    name: Accessibility Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache npm packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build for accessibility testing
        run: |
          cd frontend
          npm run build
        env:
          NODE_ENV: production

      - name: Run accessibility tests
        run: |
          echo "Accessibility testing (will be configured with axe-core in future)"
        continue-on-error: true

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, type-check, accessibility]
    if: always()

    steps:
      - name: Check CI status
        run: |
          echo "Frontend CI Pipeline Summary"
          echo "=============================="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Accessibility: ${{ needs.accessibility.result }}"

          if [ "${{ needs.lint.result }}" != "success" ] || [ "${{ needs.build.result }}" != "success" ]; then
            echo "CI Pipeline FAILED"
            exit 1
          else
            echo "CI Pipeline PASSED"
          fi
